git status命令可以让我们时刻掌握仓库当前的状态
git diff顾名思义就是查看difference
如果git status告诉你有文件被修改过，用git diff可以查看修改内容
===============================================
知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，
提交修改和提交新文件是一样的两步，第一步是git add
第二步git commit   (相当于创建了一个快照，可以随时回退到该版本号)

==时光穿梭==
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
===================================================================
每次修改，如果不用git add到暂存区，那就不会加入到commit中。
因为Git跟踪并管理的是修改，而非文件
===================================
git checkout ---xxxx 就是让这个文件回到最近一次git commit或git add时的状态
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
======================================================
git checkout -- file
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
===============================================
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。（测试发现本地删除了文件，无法通过checkout --file 撤销，只能通过时光穿梭形式回撤）
